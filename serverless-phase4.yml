service: espectra-backend-phase4

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 29
  logRetentionInDays: 14

  websocket:
    apiId: !Ref WebSocketApi
    stage: ${self:provider.stage}
  
  httpApi:
    cors: true
  apiGateway:
    restApiId: !Ref RestApiId
    restApiRootResourceId: !GetAtt RestApiId.RootResourceId
    binaryMediaTypes:
      - '*/*'

  tracing:
    lambda: true

  vpc:
    securityGroupIds:
      - Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-sg-id
    subnetIds:
      - Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-private-subnet-1-id
      - Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-private-subnet-2-id
      
  environment:
    # System Variables
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    SERVICE_NAME: ${self:custom.service}
    NODE_ENV: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}}
    API_VERSION: "v1"
    
    # Cognito Variables
    COGNITO_USER_POOL_ID: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-id
    COGNITO_CLIENT_ID:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-client-id

    # Message Queue URLs
    MESSAGE_QUEUE_URL:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-message-queue-url
    MESSAGE_DLQ_URL:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-message-dlq-url
    HANDOFF_QUEUE_URL:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-handoff-queue-url

    # DynamoDB Tables
    CONNECTION_TABLE:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-connections-table-name
    CHAT_HISTORY_TABLE:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-chat-history-table-name
    CONTEXT_TABLE:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-context-table-name
    TOKEN_TABLE:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-tokens-table-name
    # HANDOFF_TABLE:
    #   Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-handoff-table-name

    # Botpress Configuration
    BOTPRESS_API_URL: ${ssm:/espectra/${self:provider.stage}/botpress-api-url}
    BOTPRESS_BOT_ID: ${ssm:/espectra/${self:provider.stage}/botpress-bot-id}
    BOTPRESS_API_KEY: ${ssm:/espectra/${self:provider.stage}/botpress-api-key}
    BOTPRESS_WORKSPACE_ID: ${ssm:/espectra/${self:provider.stage}/botpress-workspace-id}
    BOTPRESS_EVENT_BUS:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-eventbus-name

    # WebSocket
    WEBSOCKET_API_ENDPOINT: ${self:custom.service}-${self:provider.stage}-websocket-endpoint

    # Redis Configuration
    REDIS_HOST:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-redis-endpoint
    REDIS_PORT:
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-redis-port

    SESSION_TTL: ${self:custom.session.ttl}
    SESSION_EXTEND_DURATION: ${self:custom.session.extendDuration}
    METRICS_RETENTION_DAYS: ${self:custom.monitoring.metricsRetention}
    SESSION_ALERT_THRESHOLD: ${self:custom.monitoring.sessionAlertThreshold}
    RATE_LIMIT_SESSION_CREATION: ${self:custom.rateLimit.sessionCreation}
    
    COGNITO_CLIENT_SECRET: ${ssm:/espectra/${self:provider.stage}/cognito/client-secret}

custom:
  service: espectra-backend
  
  logRetentionInDays: 14
  
  logLevel:
    dev: 'DEBUG'
    staging: 'INFO'
    prod: 'WARN'
  
  # Configuración de Table Names
  tableNames:
    connections: ${self:custom.service}-${self:provider.stage}-connection-table
    context: ${self:custom.service}-${self:provider.stage}-conversation-context-table
    tokens: ${self:custom.service}-${self:provider.stage}-token-usage-table
    handoff: ${self:custom.service}-${self:provider.stage}-handoff-table
    metrics: ${self:custom.service}-${self:provider.stage}-botpress-metrics-table

  session:
    ttl: ${ssm:/espectra/${self:provider.stage}/session/ttl}
    extendDuration: ${ssm:/espectra/${self:provider.stage}/session/extend-duration}
  
  monitoring:
    metricsRetention: ${ssm:/espectra/${self:provider.stage}/monitoring/metrics-retention}
    sessionAlertThreshold: ${ssm:/espectra/${self:provider.stage}/monitoring/session-alert-threshold}

  rateLimit:
    sessionCreation: ${ssm:/espectra/${self:provider.stage}/rate-limit/session-creation}

  # KMS Keys
  kms:
    systemKeyId: ${cf:${self:custom.service}-kms-${self:provider.stage}.SystemKMSKeyId}
    systemKeyArn: ${cf:${self:custom.service}-kms-${self:provider.stage}.SystemKMSKeyArn}
    secretsKeyId: ${cf:${self:custom.service}-kms-${self:provider.stage}.SecretsKMSKeyId}
    secretsKeyArn: ${cf:${self:custom.service}-kms-${self:provider.stage}.SecretsKMSKeyArn}
    websocketKeyId: ${cf:${self:custom.service}-kms-${self:provider.stage}.WebSocketKMSKeyId}
    websocketKeyArn: ${cf:${self:custom.service}-kms-${self:provider.stage}.WebSocketKMSKeyArn}

  # SNS Topics
  snsHighPriorityTopic: ${ssm:/espectra/${self:provider.stage}/sns/high-priority-topic}
  snsMediumPriorityTopic: ${ssm:/espectra/${self:provider.stage}/sns/medium-priority-topic}
  snsLowPriorityTopic: ${ssm:/espectra/${self:provider.stage}/sns/low-priority-topic}

  # Handoff Configuration
  handoff:
    maxQueueSize: 100
    maxWaitTime: 300

  # Alarm Thresholds
  alarmThresholds:
    api:
      latency: 1000
      4xxErrors: 5
      5xxErrors: 1
    websocket:
      connections: 2000

  apiGatewayWebsocket:
    minimumCompressionSize: 1024
    websocketApiId: !Ref WebSocketApi
    stage: ${self:provider.stage}

  serverless-offline:
    httpPort: 3000
    websocketPort: 3001
    lambdaPort: 3002
    noPrependStageInUrl: true

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true

  # Configuración de mocks para servicios AWS
  localstack:
    stages:
      - dev
    endpointFile: config/localEndpoints.json

plugins:
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-plugin-tracing
  # - serverless-offline
  # - serverless-dynamodb-local
  # - serverless-webpack
  # - serverless-offline-sns
  # - serverless-offline-sqs

package:
  individually: true
  patterns:
    - "src/**"
    # - "!node_modules/**"
    # - "!dist/**"
    # - "!**/*.spec.ts"
    # - "!**/*.test.ts"
    # - "!**/*.md"
    # - "!**/*.yml"
    # - "!**/*.yaml"
    # - "!**/.git/**"
    # - "!**/.serverless/**"

functions:
  # Auth Functions
  restAuthorizer:
    handler: services/auth/handlers/authorizer.handler
    name: ${self:custom.service}-${self:provider.stage}-rest-authorizer
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    memorySize: 256
    environment:
      COGNITO_USER_POOL_ID: 
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-id
      COGNITO_CLIENT_ID: 
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-client-id

  register:
    handler: services/auth/handlers/register.handler
    name: ${self:custom.service}-${self:provider.stage}-register
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    events:
      - http:
          path: auth/register
          method: post
          cors: true
          restApi:
            id: !Ref RestApiId
    environment:
      ALLOWED_ORIGINS: '*'
      PASSWORD_MIN_LENGTH: '8'
      USER_POOL_REGION: ${self:provider.region}
      USER_POOL_ID:
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-id
      USER_POOL_CLIENT_ID:
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-client-id
      COGNITO_CLIENT_SECRET: ${ssm:/espectra/${self:provider.stage}/cognito/client-secret}

  login:
    handler: services/auth/handlers/login.handler
    name: ${self:custom.service}-${self:provider.stage}-login
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          restApi:
            id: !Ref RestApiId

  refreshToken:
    handler: services/auth/handlers/refreshToken.handler
    name: ${self:custom.service}-${self:provider.stage}-refreshToken
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: 
      securityGroupIds:
        - Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-sg-id
      subnetIds:
        - Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-private-subnet-1-id
        - Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-private-subnet-2-id
    events:
      - http:
          path: auth/refresh-token
          method: post
          cors: true
          restApi:
            id: !Ref RestApiId
    environment:
      COGNITO_USER_POOL_ID: 
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-id
      COGNITO_CLIENT_ID: 
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-client-id
      COGNITO_CLIENT_SECRET: ${ssm:/espectra/${self:provider.stage}/cognito/client-secret}

  logout:
    handler: services/auth/handlers/logout.handler
    name: ${self:custom.service}-${self:provider.stage}-logout
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    events:
      - http:
          path: auth/logout
          method: post
          cors: true
          authorizer:
            name: restAuthorizer
          restApi:
            id: !Ref RestApiId

  # WebSocket Functions
  wsAuthorizer:
    handler: services/websocket/handlers/authorizer.handler
    name: ${self:custom.service}-${self:provider.stage}-websocket-authorizer
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    memorySize: 256
    timeout: 29
    environment:
      COGNITO_USER_POOL_ID: 
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-id
      COGNITO_CLIENT_ID: 
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-user-pool-client-id

  webSocketConnect:
    handler: services/websocket/handlers/connect.handler
    name: ${self:custom.service}-${self:provider.stage}-webSocketConnect
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - websocket:
          route: $connect
          authorizer:
            name: wsAuthorizer
            identitySource:
              - 'route.request.querystring.Auth'
          websocketApi:
            id: !Ref WebSocketApi

  webSocketDisconnect:
    handler: services/websocket/handlers/disconnect.handler
    name: ${self:custom.service}-${self:provider.stage}-webSocketDisconnect
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - websocket:
          route: $disconnect
          websocketApi:
            id: !Ref WebSocketApi

  webSocketMessage:
    handler: services/websocket/handlers/message.handler
    name: ${self:custom.service}-${self:provider.stage}-webSocketMessage
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - websocket:
          route: $default
          websocketApi:
            id: !Ref WebSocketApiñ

  # Botpress Integration Functions
  botpressWebhook:
    handler: services/botpress/handlers/webhook.handler
    name: ${self:custom.service}-${self:provider.stage}-botpress-webhook
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /botpress/webhook
          method: post
          cors: true
          restApi:
            id: !Ref RestApiId
    environment:
      BOTPRESS_API_KEY: ${ssm:/espectra/${self:provider.stage}/botpress-api-key}
    aliases:
      - name: webhook-concurrency-${self:provider.stage}
        provisionedConcurrency: 2

  processMessage:
    handler: services/botpress/handlers/message/process-message.handler
    name: ${self:custom.service}-${self:provider.stage}-process-message
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - sqs:
          arn:
            Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-message-queue-arn
          batchSize: 1
          functionResponseType: ReportBatchItemFailures

  # Handoff Functions
  handoffRequest:
    handler: services/botpress/handlers/handoff/request.handler
    name: ${self:custom.service}-${self:provider.stage}-handoff-request
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /handoff/request
          method: post
          authorizer:
            name: restAuthorizer
          cors: true
          restApi:
            id: !Ref RestApiId
    aliases:
      - name: request-concurrency-${self:provider.stage}
        provisionedConcurrency: 2

  handoffAccept:
    handler: services/botpress/handlers/handoff/accept.handler
    name: ${self:custom.service}-${self:provider.stage}-handoff-accept
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /handoff/accept
          method: post
          authorizer:
            name: restAuthorizer
          cors: true
          restApi:
            id: !Ref RestApiId
    aliases:
      - name: accept-concurrency-${self:provider.stage}
        provisionedConcurrency: 2

  # Session Management Functions
  startSession:
    handler: services/session/handlers/start.handler
    name: ${self:custom.service}-${self:provider.stage}-start-session
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /session/start
          method: post
          authorizer:
            name: restAuthorizer
          cors: true
          restApi:
            id: !Ref RestApiId

  createSession:
    handler: services/auth/handlers/session.createSession
    name: ${self:custom.service}-${self:provider.stage}-create-session
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /sessions/create
          method: post
          authorizer:
            name: restAuthorizer
          cors: true
          restApi:
            id: !Ref RestApiId
    environment:
      SESSION_TABLE:
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-chat-sessions-table-name
      METRICS_NAMESPACE: ${self:custom.service}/${self:provider.stage}
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action:
    #       - dynamodb:PutItem
    #     Resource: 
    #       Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-chat-sessions-table-arn

  extendSession:
    handler: services/auth/handlers/session.extendSession
    name: ${self:custom.service}-${self:provider.stage}-extend-session
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /sessions/update/{sessionId}
          method: put
          authorizer:
            name: restAuthorizer
          cors: true
          restApi:
            id: !Ref RestApiId
    environment:
      SESSION_TABLE:
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-chat-sessions-table-name

  endSession:
    handler: services/session/handlers/end.handler
    name: ${self:custom.service}-${self:provider.stage}-end-session
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - http:
          path: /session/end
          method: post
          authorizer:
            name: restAuthorizer
          cors: true
          restApi:
            id: !Ref RestApiId

  # Metrics Functions
  metricsCollector:
    handler: services/metrics/handlers/collector.handler
    name: ${self:custom.service}-${self:provider.stage}-metrics-collector
    role: 
      Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-lambda-role-arn
    vpc: null
    events:
      - schedule: rate(1 minute)
    environment:
      METRICS_NAMESPACE: ${self:custom.service}/${self:provider.stage}
      BOTPRESS_METRICS_TABLE:
        Fn::ImportValue: ${self:custom.service}-${self:provider.stage}-metrics-table-name

resources:
  - ${file(infrastructure/apigateway/api.yml)}
  - ${file(infrastructure/apigateway/chat-api-routes.yml)}
  
  - ${file(infrastructure/security/waf.yml)}

  - ${file(infrastructure/websocket/websocket.yml)}
  - ${file(infrastructure/security/websocket-security.yml)}

outputs:
  ApiId:
    Description: REST API Id
    Value: !Ref RestApiId
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-rest-api-id

  RestApiRootResourceId:
    Description: REST API Root Resource Id
    Value: !GetAtt RestApiId.RootResourceId
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-rest-api-root-resource-id

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RestApiId}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-api-endpoint

  RestApiAuthorizerId:
    Description: REST API Authorizer ID
    Value: !Ref RestApiAuthorizer
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-rest-authorizer-id
      
  ChatResourceId:
    Description: Chat Resource ID
    Value: !Ref ChatResource
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-chat-resource-id

  SessionsResourceId:
    Description: Sessions Resource ID
    Value: !Ref SessionsResource
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-sessions-resource-id

  MessagesResourceId:
    Description: Messages Resource ID
    Value: !Ref MessagesResource
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-messages-resource-id

  HandoffResourceId:
    Description: Handoff Resource ID
    Value: !Ref HandoffResource
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-handoff-resource-id
      
  WebACLId:
    Description: ID of the Web ACL
    Value: !GetAtt SpectraWebACL.Id
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-waf-id

  WebACLArn:
    Description: ARN of the Web ACL
    Value: !GetAtt SpectraWebACL.Arn
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-waf-arn

  IPSetId:
    Description: ID of the IP Set
    Value: !Ref IPSet
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-ipset-id

  WafLogGroupName:
    Description: Name of the WAF Log Group
    Value: !Ref WafLogGroup
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-waf-log-group

  WebSocketIPSetId:
    Description: WebSocket IP Set ID
    Value: !Ref WebSocketIPSet
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-websocket-ipset-id
      
  WebSocketApiId:
    Description: WebSocket API ID
    Value: !Ref WebSocketApi
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-websocket-api-id

  WebSocketApiEndpoint:
    Description: WebSocket API Endpoint
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-websocket-endpoint

  WebSocketStageArn:
    Description: WebSocket Stage ARN
    Value: !Sub arn:aws:apigateway:${AWS::Region}::/apis/${WebSocketApi}/stages/${self:provider.stage}
    Export:
      Name: ${self:custom.service}-${self:provider.stage}-websocket-stage-arn