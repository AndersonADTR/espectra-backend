service: espectra-backend

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 30
  logRetentionInDays: 14
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    SERVICE_NAME: ${self:service}
    # Variables de entorno para el cognito
    COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
    COGNITO_CLIENT_ID: ${self:custom.userPoolClientId}
    MESSAGE_QUEUE_URL: !Ref MessageQueue
    CONNECTION_TABLE: ${self:service}-${self:provider.stage}-connections
    CHAT_HISTORY_TABLE: ${self:service}-${self:provider.stage}-chat-history
    # Variables de entorno para el botpress
    BOTPRESS_API_URL: ${ssm:/${self:service}/${self:provider.stage}/botpress-api-url}
    BOTPRESS_BOT_ID: ${ssm:/${self:service}/${self:provider.stage}/botpress-bot-id}
    BOTPRESS_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/botpress-api-key}
    BOTPRESS_WORKSPACE_ID: ${ssm:/${self:service}/${self:provider.stage}/botpress-workspace-id}
    BOTPRESS_QUEUE_URL: !Ref MessageQueue
    BOTPRESS_DLQ_URL: !Ref MessageDLQ
    BOTPRESS_EVENT_BUS: !Ref BotpressEventBus
    # Variables de entorno para el websocket
    WEBSOCKET_API_ENDPOINT: 
      !Join
        - ''
        - - 'https://'
          - !Ref WebsocketsApi
          - '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminGetUser
            - cognito-idp:InitiateAuth
            - cognito-idp:SignUp
            - cognito-idp:AdminConfirmSignUp
          Resource: !GetAtt SpectraUserPool.Arn
        
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - !GetAtt UsersTable.Arn
            - !Join ['', [!GetAtt UsersTable.Arn, '/index/*']]
            - !GetAtt ConnectionsTable.Arn
            - !Join ['', [!GetAtt ConnectionsTable.Arn, '/index/*']]

        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.chatHistoryTable}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.connectionsTableName}
        
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'

        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - arn:aws:execute-api:${self:provider.region}:*:*/*/POST/@connections/*

        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:service}/botpress/*

custom:
  tableNames:
    connections: ${self:service}-${self:provider.stage}-connections
    context: ${self:service}-${self:provider.stage}-context
    tokens: ${self:service}-${self:provider.stage}-tokens
    handoff: ${self:service}-${self:provider.stage}-handoff
  userPoolId: ${cf:${self:service}-${self:provider.stage}.UserPoolId}
  userPoolClientId: ${cf:${self:service}-${self:provider.stage}.UserPoolClientId}
  connectionsTableName: ${self:service}-${self:provider.stage}-connections
  chatHistoryTable: ${self:service}-${self:provider.stage}-chat-history
  snsAlarmTopic: ${ssm:/${self:service}/${self:provider.stage}/sns-alarm-topic-arn}
  IS_OFFLINE: ${env:IS_OFFLINE, 'false'}
  logRetentionInDays: 14
  logLevel:
    dev: 'DEBUG'
    staging: 'INFO'
    prod: 'WARN'
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: 
      - aws-sdk
      - /@aws-sdk/*
    target: 'node20'
    define: { 'require.resolve': undefined }
    platform: 'node'
    concurrency: 10
    external:
      - aws-sdk
      - tslib

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true
  patterns:
    - "!./**"
    - "node_modules/@aws-sdk/**"
    - "node_modules/@smithy/**"
    - "node_modules/aws-sdk/**"
    - "node_modules/@aws-sdk/types/**"
    - "node_modules/tslib/**"
    - "node_modules/uuid/**"
    - "node_modules/aws-jwt-verify/**"
    - "node_modules/fast-xml-parser/**"
    - "node_modules/strnum/**"
    - "node_modules/mnemonist/**"
    - "!node_modules/@types/**"
    - "services/**/*.ts"
    - "shared/**/*.ts"

functions:
  authorizer:
    handler: services/auth/authorizer.handler
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.userPoolId} #${cf:${self:service}-${self:provider.stage}.UserPoolId}
      COGNITO_CLIENT_ID: ${self:custom.userPoolClientId} #${cf:${self:service}-${self:provider.stage}.UserPoolClientId}

  register:
    handler: services/auth/handlers/register.handler
    events:
      - http:
          path: auth/register
          method: post
          cors: true
    environment:
      # Variables de entorno específicas para la función register
      ALLOWED_ORIGINS: '*'
      PASSWORD_MIN_LENGTH: '8'
      USER_POOL_REGION: ${self:provider.region}

  login:
    handler: services/auth/handlers/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  refreshToken:
    handler: services/auth/handlers/refreshToken.handler
    events:
      - http:
          path: auth/refresh-token
          method: post
          cors: true

  logout:
    handler: services/auth/handlers/logout.handler
    events:
      - http:
          path: auth/logout
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: token

  getUser:
    handler: services/auth/handlers/getUser.handler
    events:
      - http:
          path: users/{userId}
          method: get
          authorizer:
            name: authorizer
            type: token

  websocketAuthorizer:
    handler: services/websocket/handlers/authorizer.handler
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
      COGNITO_CLIENT_ID: ${self:custom.userPoolClientId}
      LOG_LEVEL: 'debug'  # Aumentar nivel de logging para diagnóstico
    memorySize: 256
    timeout: 10
    # Agregar logs específicos para el authorizer
    logRetentionInDays: 14
    tags:
      Function: WebSocketAuthorizer
      Service: ${self:service}
      Environment: ${self:provider.stage}

  webSocketConnect:
    handler: services/websocket/handlers/connect.handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authorizer
            identitySource:
              - 'route.request.querystring.Auth'

  webSocketDisconnect:
    handler: services/websocket/handlers/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  webSocketMessage:
    handler: services/websocket/handlers/message.handler
    events:
      - websocket:
          route: $default
    environment:
      WEBSOCKET_API_ENDPOINT: ${self:provider.environment.WEBSOCKET_API_ENDPOINT}
      CONNECTION_TABLE: ${self:custom.connectionsTableName}

  # Webhook Handlers
  webhookHandler:
    handler: services/botpress/handlers/webhook/webhook-handler.handler
    events:
      - http:
          path: /botpress/webhook
          method: post
          cors: true

  # Message Processing
  processMessage:
    handler: services/botpress/handlers/message/process-message.handler
    events:
      - sqs:
          arn: !GetAtt MessageQueue.Arn
          batchSize: 1

  # Human Handoff
  handoffRequest:
    handler: services/botpress/handlers/handoff/request.handler
    events:
      - http:
          path: /handoff/request
          method: post
          authorizer:
            name: authorizer
            # identitySource:
            #   - 'route.request.querystring.Auth'
          cors: true

  handoffAccept:
    handler: services/botpress/handlers/handoff/accept.handler
    events:
      - http:
          path: /handoff/accept
          method: post
          authorizer:
            name: authorizer
            # identitySource:
            #   - 'route.request.querystring.Auth'
          cors: true

resources:
  - ${file(infrastructure/network/vpc.yml)}
  - ${file(infrastructure/iam/roles.yml)}
  - ${file(infrastructure/iam/websocket-roles.yml)}
  - ${file(infrastructure/security/kms.yml)}
  - ${file(infrastructure/queues/message-queues.yml)}
  - ${file(infrastructure/cognito/cognito.yml)}
  - ${file(infrastructure/dynamodb/user-tables.yml)}
  - ${file(infrastructure/dynamodb/botpress-tables.yml)}
  - ${file(infrastructure/dynamodb/chat-history-tables.yml)}
  - ${file(infrastructure/dynamodb/connection-concierge-tables.yml)}
  - ${file(infrastructure/eventbridge/botpress-event-bus.yml)}
  - ${file(infrastructure/websocket/websocket.yml)}
  - ${file(infrastructure/security/websocket-security.yml)}
  - ${file(infrastructure/security/waf.yml)}
  - ${file(infrastructure/monitoring/cloudwatch.yml)}