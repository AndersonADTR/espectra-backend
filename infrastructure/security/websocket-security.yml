# infrastructure/security/websocket-security.yml
Resources:
  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      Name: websocket-cognito-authorizer
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketAuthorizerFunction.Arn}/invocations
      IdentitySource:
        - route.request.querystring.Auth

  WebSocketAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ${self:service}-${self:provider.stage}-ws-authorizer
      Handler: services/websocket/handlers/authorizer.handler
      Runtime: nodejs20.x
      Timeout: 10
      MemorySize: 256
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Temporary inline code - will be replaced by actual handler
            console.log('Event:', JSON.stringify(event));
            throw new Error('Authorizer not implemented');
          }
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: ${cf:${self:service}-${self:provider.stage}.UserPoolId}
          COGNITO_CLIENT_ID: ${cf:${self:service}-${self:provider.stage}.UserPoolClientId}
      Role: !GetAtt WebSocketAuthorizerRole.Arn
  
  WebSocketAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSocketAuthorizerFunction.Arn
      Principal: apigateway.amazonaws.com

  WebSocketAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-${self:provider.stage}-ws-authorizer-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: cognito-verify
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                Resource:
                  Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${cf:${self:service}-${self:provider.stage}.UserPoolId}
                Condition:
                  StringEquals:
                    cognito-idp:client_id: ${cf:${self:service}-${self:provider.stage}.UserPoolClientId}

  WebSocketWAFRules:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: ${self:service}-${self:provider.stage}-websocket-waf
      Description: WAF rules for WebSocket API
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: WebSocketWAF
      Rules:
        - Name: RateLimit
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: WebSocketRateLimit
        - Name: IPBlacklist
          Priority: 2
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WebSocketIPSet.Arn
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: WebSocketIPBlacklist

  WebSocketIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: ${self:service}-${self:provider.stage}-websocket-ipset
      Description: Blocked IPs for WebSocket
      Scope: REGIONAL
      IPAddressVersion: IPV4
      Addresses: []  # Se puede actualizar seg√∫n necesidad