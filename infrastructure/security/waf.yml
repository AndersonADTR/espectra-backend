Resources:
  SpectraWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: ${self:service}-${self:provider.stage}-waf
      Description: WAF Web ACL for Spectra API
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: ${self:service}-${self:provider.stage}-waf-metrics
      Rules:
        - Name: RateLimit
          Priority: 1
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitMetric

  WebACLAssociationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt WafAssociationLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const https = require('https');
          const url = require('url');

          const sendResponse = async (event, context, responseStatus, responseData) => {
            try {
              const responseBody = JSON.stringify({
                Status: responseStatus,
                Reason: responseData.error || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                PhysicalResourceId: context.logStreamName,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                NoEcho: false,
                Data: responseData
              });

              console.log('Sending response:', responseBody);

              const parsedUrl = url.parse(event.ResponseURL);
              const requestOptions = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: 'PUT',
                headers: {
                  'content-type': '',
                  'content-length': responseBody.length
                }
              };

              return new Promise((resolve, reject) => {
                const request = https.request(requestOptions, resolve);
                request.on('error', reject);
                request.write(responseBody);
                request.end();
              });
            } catch (error) {
              console.error('Error sending response:', error);
              throw error;
            }
          };

          exports.handler = async (event, context) => {
            console.log('Received event:', JSON.stringify(event, null, 2));

            try {
              // Si es una petición de eliminación
              if (event.RequestType === 'Delete') {
                console.log('Processing Delete request');
                await sendResponse(event, context, 'SUCCESS', {});
                return;
              }

              const wafv2 = new AWS.WAFV2({ region: process.env.REGION });
              const apigateway = new AWS.APIGateway({ region: process.env.REGION });

              // Buscar el API Gateway
              const apis = await apigateway.getRestApis().promise();
              console.log('APIs found:', JSON.stringify(apis, null, 2));

              const api = apis.items.find(api => 
                api.name.toLowerCase().includes(process.env.SERVICE_NAME.toLowerCase())
              );

              if (!api) {
                throw new Error('API Gateway not found');
              }

              const resourceArn = `arn:aws:apigateway:${process.env.REGION}::/restapis/${api.id}/stages/${process.env.STAGE}`;
              
              // Asociar WAF
              await wafv2.associateWebACL({
                WebACLArn: event.ResourceProperties.WebACLArn,
                ResourceArn: resourceArn
              }).promise();

              console.log('Successfully associated WebACL');
              await sendResponse(event, context, 'SUCCESS', {});
            } catch (error) {
              console.error('Error:', error);
              await sendResponse(event, context, 'FAILED', { error: error.message });
            }
          };

      Runtime: nodejs18.x
      Timeout: 300
      Environment:
        Variables:
          STAGE: ${self:provider.stage}
          SERVICE_NAME: ${self:service}
          REGION: ${self:provider.region}

Outputs:
  WebACLId:
    Description: ID of the Web ACL
    Value: !Ref SpectraWebACL
  WebACLArn:
    Description: ARN of the Web ACL
    Value: !GetAtt SpectraWebACL.Arn
    Export:
      Name: ${self:service}-${self:provider.stage}-waf-arn